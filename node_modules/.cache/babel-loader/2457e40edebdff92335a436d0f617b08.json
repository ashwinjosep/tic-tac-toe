{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Ashwin\\\\Desktop\\\\React\\\\tic-tac-toe\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ashwin\\\\Desktop\\\\React\\\\tic-tac-toe\\\\my-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // replacing square class with a function component\n// Function components are used for classes that only have render methods and no state\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, props.value);\n} // class Square extends React.Component {\n//\n// // // Setting state\n// //   constructor(props){\n// //     // always call super before declaring constructor of JS classes\n// //     super(props);\n// //     this.state={\n// //       value:null,\n// //     };\n// //   }\n//\n//   render() {\n//     return (\n//       <button\n//         className=\"square\"\n//         onClick={() => this.props.onClick()}\n//       >\n//         {this.props.value}\n//       </button>\n//     );\n//   }\n// }\n\n\nclass Board extends React.Component {\n  // lifting this to game component\n  // constructor(props){\n  //   super(props);\n  //   this.state={\n  //     squares: Array(9).fill(null),\n  //     xIsNext: true,\n  //   };\n  // }\n  // handleClick(i){\n  //     const squares = this.state.squares.slice();\n  //     if(calculateWinner(squares) || squares[i])\n  //     {\n  //       return;\n  //     }\n  //\n  //     squares[i] = this.state.xIsNext? 'X': 'O';\n  //     this.setState({\n  //       squares: squares,\n  //       xIsNext: !this.state.xIsNext,\n  //     });\n  // }\n  renderSquare(i) {\n    return React.createElement(Square, {\n      key: i,\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    });\n  }\n\n  createGrid() {\n    let grid = [];\n\n    for (let i = 0; i < 3; i++) {\n      let row = [];\n\n      for (let j = 0; j < 3; j++) {\n        let cell = this.renderSquare(i * 3 + j);\n        row.push(cell);\n      }\n\n      grid.push(React.createElement(\"div\", {\n        className: \"board-row\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, row));\n    }\n\n    return grid;\n  }\n\n  render() {\n    // Lifting this up to game component\n    // const winner = calculateWinner(this.state.squares);\n    // let status;\n    // if(winner){\n    //   status = \"Winner : \"+winner;\n    // }\n    // else {\n    //   status = 'Next player: '+ (this.state.xIsNext? 'X': 'O');\n    // }\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.createGrid()) // replacing this with function\n    // <div>\n    //   <div className=\"board-row\">\n    //     {this.renderSquare(0)}\n    //     {this.renderSquare(1)}\n    //     {this.renderSquare(2)}\n    //   </div>\n    //   <div className=\"board-row\">\n    //     {this.renderSquare(3)}\n    //     {this.renderSquare(4)}\n    //     {this.renderSquare(5)}\n    //   </div>\n    //   <div className=\"board-row\">\n    //     {this.renderSquare(6)}\n    //     {this.renderSquare(7)}\n    //     {this.renderSquare(8)}\n    //   </div>\n    // </div>\n    ;\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        // adding the index of the cell that was edited\n        squareNumber: -1\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    const _calculateWinner = calculateWinner(squares),\n          _calculateWinner2 = _slicedToArray(_calculateWinner, 4),\n          winner = _calculateWinner2[0],\n          c1 = _calculateWinner2[1],\n          c2 = _calculateWinner2[2],\n          c3 = _calculateWinner2[3];\n\n    if (winner === 'X' || winner === 'O' || squares[i]) {\n      // console.log(\"Winner found\",c1,c2,c3);\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        // set the index of the edited cell\n        squareNumber: i\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n\n    const _calculateWinner3 = calculateWinner(current.squares),\n          _calculateWinner4 = _slicedToArray(_calculateWinner3, 4),\n          winner = _calculateWinner4[0],\n          c1 = _calculateWinner4[1],\n          c2 = _calculateWinner4[2],\n          c3 = _calculateWinner4[3];\n\n    console.log(winner, c1, c2, c3); // mapping history\n\n    const moves = history.map((step, move) => {\n      // changing label for buttons to include row and column number\n      const moveButtonLabel = 'Go to move #' + move + ' ( Row : ' + Math.floor(history[move].squareNumber / 3) + ' , Column : ' + history[move].squareNumber % 3 + ' )';\n      const desc = move ? moveButtonLabel : 'Go to game start';\n      const btnClass = move === this.state.stepNumber ? 'btnHighlight' : 'btnNormal';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: btnClass,\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner === 'X' || winner === 'O') {\n      status = \"Winner : \" + winner;\n    } // Adding game drawn message\n    else if (this.state.stepNumber === 9) {\n        status = 'Game Drawn';\n      } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, status), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, moves)));\n  }\n\n} // function to calculate if game is won\n\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      // todo return cell indices to highlight the boxes\n      console.log(a, b, c);\n      return [squares[a], a, b, c];\n    }\n  }\n\n  return ['-', -1, -1, -1];\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 250\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:\\Users\\Ashwin\\Desktop\\React\\tic-tac-toe\\my-app\\src\\index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","createGrid","grid","row","j","cell","push","render","Game","constructor","state","history","Array","fill","squareNumber","stepNumber","xIsNext","handleClick","slice","current","length","calculateWinner","winner","c1","c2","c3","setState","concat","jumpTo","step","console","log","moves","map","move","moveButtonLabel","Math","floor","desc","btnClass","status","lines","a","b","c","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// replacing square class with a function component\r\n// Function components are used for classes that only have render methods and no state\r\nfunction Square(props){\r\n  return(\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  )\r\n}\r\n\r\n// class Square extends React.Component {\r\n//\r\n// // // Setting state\r\n// //   constructor(props){\r\n// //     // always call super before declaring constructor of JS classes\r\n// //     super(props);\r\n// //     this.state={\r\n// //       value:null,\r\n// //     };\r\n// //   }\r\n//\r\n//   render() {\r\n//     return (\r\n//       <button\r\n//         className=\"square\"\r\n//         onClick={() => this.props.onClick()}\r\n//       >\r\n//         {this.props.value}\r\n//       </button>\r\n//     );\r\n//   }\r\n// }\r\n\r\nclass Board extends React.Component {\r\n\r\n  // lifting this to game component\r\n\r\n  // constructor(props){\r\n  //   super(props);\r\n  //   this.state={\r\n  //     squares: Array(9).fill(null),\r\n  //     xIsNext: true,\r\n  //   };\r\n  // }\r\n\r\n  // handleClick(i){\r\n  //     const squares = this.state.squares.slice();\r\n  //     if(calculateWinner(squares) || squares[i])\r\n  //     {\r\n  //       return;\r\n  //     }\r\n  //\r\n  //     squares[i] = this.state.xIsNext? 'X': 'O';\r\n  //     this.setState({\r\n  //       squares: squares,\r\n  //       xIsNext: !this.state.xIsNext,\r\n  //     });\r\n  // }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  createGrid(){\r\n    let grid = [];\r\n    for(let i=0;i<3;i++){\r\n        let row = [];\r\n        for(let j=0;j<3;j++)\r\n        {\r\n          let cell = this.renderSquare(((i*3)+j))\r\n          row.push(cell)\r\n        }\r\n        grid.push(<div className=\"board-row\" key={i} >{row}</div>);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  render() {\r\n    // Lifting this up to game component\r\n    // const winner = calculateWinner(this.state.squares);\r\n    // let status;\r\n    // if(winner){\r\n    //   status = \"Winner : \"+winner;\r\n    // }\r\n    // else {\r\n    //   status = 'Next player: '+ (this.state.xIsNext? 'X': 'O');\r\n    // }\r\n\r\n    return (\r\n      <div>\r\n        {this.createGrid()}\r\n      </div>\r\n      // replacing this with function\r\n      // <div>\r\n      //   <div className=\"board-row\">\r\n      //     {this.renderSquare(0)}\r\n      //     {this.renderSquare(1)}\r\n      //     {this.renderSquare(2)}\r\n      //   </div>\r\n      //   <div className=\"board-row\">\r\n      //     {this.renderSquare(3)}\r\n      //     {this.renderSquare(4)}\r\n      //     {this.renderSquare(5)}\r\n      //   </div>\r\n      //   <div className=\"board-row\">\r\n      //     {this.renderSquare(6)}\r\n      //     {this.renderSquare(7)}\r\n      //     {this.renderSquare(8)}\r\n      //   </div>\r\n      // </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n\r\n        // adding the index of the cell that was edited\r\n        squareNumber: -1,\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    }\r\n  }\r\n\r\n  handleClick(i){\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length-1];\r\n    const squares = current.squares.slice();\r\n    const [winner,c1,c2,c3]=calculateWinner(squares);\r\n    if(winner==='X'||winner==='O'||squares[i])\r\n    {\r\n      // console.log(\"Winner found\",c1,c2,c3);\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext? 'X': 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n        // set the index of the edited cell\r\n        squareNumber: i,\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step){\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step%2 === 0)\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const [winner,c1,c2,c3] = calculateWinner(current.squares);\r\n    console.log(winner,c1,c2,c3);\r\n\r\n    // mapping history\r\n    const moves = history.map((step, move) => {\r\n      // changing label for buttons to include row and column number\r\n      const moveButtonLabel = 'Go to move #' + move + ' ( Row : ' + Math.floor(history[move].squareNumber/3) + ' , Column : '+ history[move].squareNumber%3 +' )'\r\n      const desc = move ? moveButtonLabel : 'Go to game start';\r\n      const btnClass = move===this.state.stepNumber?'btnHighlight':'btnNormal';\r\n      return (\r\n        <li key={move}>\r\n          <button className={btnClass}\r\n          onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      )\r\n    })\r\n\r\n\r\n\r\n    let status;\r\n    if(winner==='X'||winner==='O'){\r\n      status = \"Winner : \"+winner;\r\n    }\r\n    // Adding game drawn message\r\n    else if (this.state.stepNumber===9) {\r\n      status = 'Game Drawn';\r\n    }\r\n    else {\r\n      status = 'Next player: '+ (this.state.xIsNext? 'X': 'O');\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// function to calculate if game is won\r\nfunction calculateWinner(squares){\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for(let i=0; i<lines.length; i++)\r\n  {\r\n    const[a, b, c]=lines[i];\r\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\r\n    {\r\n      // todo return cell indices to highlight the boxes\r\n      console.log(a,b,c)\r\n      return [squares[a], a, b, c];\r\n    }\r\n  }\r\n  return ['-',-1,-1,-1];\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"]},"metadata":{},"sourceType":"module"}