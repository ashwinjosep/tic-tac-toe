{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Ashwin\\\\Desktop\\\\React\\\\tic-tac-toe\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ashwin\\\\Desktop\\\\React\\\\tic-tac-toe\\\\my-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // replacing square class with a function component\n// Function components are used for classes that only have render methods and no state\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, props.value);\n} // class Square extends React.Component {\n//\n// // // Setting state\n// //   constructor(props){\n// //     // always call super before declaring constructor of JS classes\n// //     super(props);\n// //     this.state={\n// //       value:null,\n// //     };\n// //   }\n//\n//   render() {\n//     return (\n//       <button\n//         className=\"square\"\n//         onClick={() => this.props.onClick()}\n//       >\n//         {this.props.value}\n//       </button>\n//     );\n//   }\n// }\n\n\nclass Board extends React.Component {\n  // lifting this to game component\n  // constructor(props){\n  //   super(props);\n  //   this.state={\n  //     squares: Array(9).fill(null),\n  //     xIsNext: true,\n  //   };\n  // }\n  // handleClick(i){\n  //     const squares = this.state.squares.slice();\n  //     if(calculateWinner(squares) || squares[i])\n  //     {\n  //       return;\n  //     }\n  //\n  //     squares[i] = this.state.xIsNext? 'X': 'O';\n  //     this.setState({\n  //       squares: squares,\n  //       xIsNext: !this.state.xIsNext,\n  //     });\n  // }\n  renderSquare(i) {\n    return React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    // Lifting this up to game component\n    // const winner = calculateWinner(this.state.squares);\n    // let status;\n    // if(winner){\n    //   status = \"Winner : \"+winner;\n    // }\n    // else {\n    //   status = 'Next player: '+ (this.state.xIsNext? 'X': 'O');\n    // }\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      squareNumber: [-1],\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      squareNumber: squareNumber.concat[i],\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    console.log(this.state); // mapping history\n\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = \"Winner : \" + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, status), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, moves)));\n  }\n\n} // function to calculate if game is won\n\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 217\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:\\Users\\Ashwin\\Desktop\\React\\tic-tac-toe\\my-app\\src\\index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","Array","fill","stepNumber","squareNumber","xIsNext","handleClick","slice","current","length","calculateWinner","setState","concat","jumpTo","step","winner","console","log","moves","map","move","desc","status","lines","a","b","c","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// replacing square class with a function component\r\n// Function components are used for classes that only have render methods and no state\r\nfunction Square(props){\r\n  return(\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  )\r\n}\r\n\r\n// class Square extends React.Component {\r\n//\r\n// // // Setting state\r\n// //   constructor(props){\r\n// //     // always call super before declaring constructor of JS classes\r\n// //     super(props);\r\n// //     this.state={\r\n// //       value:null,\r\n// //     };\r\n// //   }\r\n//\r\n//   render() {\r\n//     return (\r\n//       <button\r\n//         className=\"square\"\r\n//         onClick={() => this.props.onClick()}\r\n//       >\r\n//         {this.props.value}\r\n//       </button>\r\n//     );\r\n//   }\r\n// }\r\n\r\nclass Board extends React.Component {\r\n\r\n  // lifting this to game component\r\n\r\n  // constructor(props){\r\n  //   super(props);\r\n  //   this.state={\r\n  //     squares: Array(9).fill(null),\r\n  //     xIsNext: true,\r\n  //   };\r\n  // }\r\n\r\n  // handleClick(i){\r\n  //     const squares = this.state.squares.slice();\r\n  //     if(calculateWinner(squares) || squares[i])\r\n  //     {\r\n  //       return;\r\n  //     }\r\n  //\r\n  //     squares[i] = this.state.xIsNext? 'X': 'O';\r\n  //     this.setState({\r\n  //       squares: squares,\r\n  //       xIsNext: !this.state.xIsNext,\r\n  //     });\r\n  // }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // Lifting this up to game component\r\n    // const winner = calculateWinner(this.state.squares);\r\n    // let status;\r\n    // if(winner){\r\n    //   status = \"Winner : \"+winner;\r\n    // }\r\n    // else {\r\n    //   status = 'Next player: '+ (this.state.xIsNext? 'X': 'O');\r\n    // }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      squareNumber: [-1],\r\n      xIsNext: true,\r\n    }\r\n  }\r\n\r\n  handleClick(i){\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length-1];\r\n    const squares = current.squares.slice();\r\n    if(calculateWinner(squares) || squares[i])\r\n    {\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext? 'X': 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n      stepNumber: history.length,\r\n      squareNumber: squareNumber.concat[i],\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step){\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step%2 === 0)\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    console.log(this.state);\r\n    // mapping history\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      )\r\n    })\r\n\r\n\r\n\r\n    let status;\r\n    if(winner){\r\n      status = \"Winner : \"+winner;\r\n    }\r\n    else {\r\n      status = 'Next player: '+ (this.state.xIsNext? 'X': 'O');\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// function to calculate if game is won\r\nfunction calculateWinner(squares){\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for(let i=0; i<lines.length; i++)\r\n  {\r\n    const[a, b, c]=lines[i];\r\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\r\n    {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"]},"metadata":{},"sourceType":"module"}