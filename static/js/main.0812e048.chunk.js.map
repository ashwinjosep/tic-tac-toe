{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/Game.jsx","index.js"],"names":["Square","props","className","value","onClick","Board","renderSquare","i","key","squares","grid","row","j","cell","push","createGrid","calculateWinner","lines","length","a","b","c","Game","useState","Array","fill","squareNumber","history","setHistory","step","setStep","xIsNext","setXIsNext","status","winner","getStatus","slice","handleClick","App","ReactDOM","render","document","getElementById"],"mappings":"uKAUeA,EARA,SAACC,GACd,OACE,4BAAQC,UAAW,UAAYD,EAAME,MAAOC,QAASH,EAAMG,SACxDH,EAAME,QC6BEE,EA/BD,SAACJ,GACb,IAAMK,EAAe,SAACC,GACpB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLJ,MAAOF,EAAMQ,QAAQF,GACrBH,QAAS,kBAAMH,EAAMG,QAAQG,OAsBnC,OAAO,yBAAKL,UAAU,cAjBH,WAEjB,IADA,IAAIQ,EAAO,GACFH,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAII,EAAM,GACDC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAOP,EAAiB,EAAJC,EAAQK,GAChCD,EAAIG,KAAKD,GAEXH,EAAKI,KACH,yBAAKZ,UAAU,YAAYM,IAAKD,GAC7BI,IAIP,OAAOD,EAG2BK,KCwBhCC,G,KAAkB,SAACP,GAWvB,IAVA,IAAMQ,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAV,EAAI,EAAGA,EAAIU,EAAMC,OAAQX,IAAK,CACrC,kBAAkBU,EAAMV,GAAxB,GAAOY,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIZ,EAAQU,IAAMV,EAAQU,KAAOV,EAAQW,IAAMX,EAAQU,KAAOV,EAAQY,GACpE,OAAOZ,EAAQU,GAGnB,MAAO,MAGMG,EAvEF,WACX,MAA8BC,mBAAS,CACrCd,QAASe,MAAM,GAAGC,KAAK,MACvBC,cAAe,IAFjB,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,EAAwBL,mBAAS,GAAjC,mBAAOM,EAAP,KAAaC,EAAb,KACA,EAA8BP,oBAAS,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KA+BMC,EAXY,SAACC,GACjB,MAAe,MAAXA,GAA6B,MAAXA,EACb,YAAcA,EACH,IAATL,EACF,aAEA,iBAAmBE,EAAU,IAAM,KAK/BI,CADAnB,EAAgBW,EAAQlB,UAGvC,OACE,yBAAKP,UAAU,QACb,yBAAKA,UAAU,aACb,6BAAM+B,IAER,kBAAC,EAAD,CAAOxB,QAASkB,EAAQlB,QAASL,QAAS,SAACG,GAAD,OApC1B,SAACA,GACnB,IAAME,EAAUkB,EAAQlB,QAAQ2B,QAC1BF,EAASlB,EAAgBP,GAEhB,MAAXyB,GAA6B,MAAXA,GAAkBzB,EAAQF,KAGhDE,EAAQF,GAAKwB,EAAU,IAAM,IAM7BH,EALsB,CACpBnB,QAASA,EACTiB,aAAcnB,IAIhByB,GAAYD,GACZD,EAAQD,EAAO,IAqBoCQ,CAAY9B,QC5C7D+B,EAAM,WACV,OACE,6BACE,kBAAC,EAAD,QAKNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.0812e048.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square = (props) => {\r\n  return (\r\n    <button className={\"square \" + props.value} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nconst Board = (props) => {\r\n  const renderSquare = (i) => {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={props.squares[i]}\r\n        onClick={() => props.onClick(i)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const createGrid = () => {\r\n    let grid = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        let cell = renderSquare(i * 3 + j);\r\n        row.push(cell);\r\n      }\r\n      grid.push(\r\n        <div className=\"board-row\" key={i}>\r\n          {row}\r\n        </div>\r\n      );\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  return <div className=\"game-board\">{createGrid()}</div>;\r\n};\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\nimport Board from \"./Board\";\r\nimport \"../index.css\";\r\n\r\nconst Game = () => {\r\n  const [history, setHistory] = useState({\r\n    squares: Array(9).fill(null),\r\n    squareNumber: -1,\r\n  });\r\n\r\n  const [step, setStep] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n\r\n  const handleClick = (i) => {\r\n    const squares = history.squares.slice();\r\n    const winner = calculateWinner(squares);\r\n\r\n    if (winner === \"x\" || winner === \"o\" || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"x\" : \"o\";\r\n    const historyUpdate = {\r\n      squares: squares,\r\n      squareNumber: i,\r\n    };\r\n\r\n    setHistory(historyUpdate);\r\n    setXIsNext(!xIsNext);\r\n    setStep(step + 1);\r\n  };\r\n\r\n  const getStatus = (winner) => {\r\n    if (winner === \"x\" || winner === \"o\") {\r\n      return \"Winner : \" + winner;\r\n    } else if (step === 9) {\r\n      return \"Game Drawn\";\r\n    } else {\r\n      return \"Next player: \" + (xIsNext ? \"x\" : \"o\");\r\n    }\r\n  };\r\n\r\n  const winner = calculateWinner(history.squares);\r\n  const status = getStatus(winner);\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-info\">\r\n        <div>{status}</div>\r\n      </div>\r\n      <Board squares={history.squares} onClick={(i) => handleClick(i)} />\r\n    </div>\r\n  );\r\n};\r\n\r\n// function to calculate if game is won\r\nconst calculateWinner = (squares) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return \"-\";\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Game from \"./components/Game\";\r\nimport \"./index.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Game />\r\n    </div>\r\n  );\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}