{"version":3,"sources":["index.js"],"names":["Square","props","className","value","onClick","Board","i","key","this","squares","grid","row","j","cell","renderSquare","push","createGrid","React","Component","Game","state","history","Array","fill","squareNumber","stepNumber","xIsNext","slice","length","calculateWinner","winner","setState","concat","step","status","current","moves","map","move","moveButtonLabel","Math","floor","desc","btnClass","type","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f0748a6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className={\"square \" + props.value} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  createGrid() {\r\n    let grid = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        let cell = this.renderSquare(i * 3 + j);\r\n        row.push(cell);\r\n      }\r\n      grid.push(\r\n        <div className=\"board-row\" key={i}>\r\n          {row}\r\n        </div>\r\n      );\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.createGrid()}</div>;\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n\r\n          // adding the index of the cell that was edited\r\n          squareNumber: -1,\r\n        },\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    const [winner] = calculateWinner(squares);\r\n    if (winner === \"x\" || winner === \"o\" || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? \"x\" : \"o\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          // set the index of the edited cell\r\n          squareNumber: i,\r\n        },\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const [winner] = calculateWinner(current.squares);\r\n\r\n    // mapping history\r\n    const moves = history.map((step, move) => {\r\n      // changing label for buttons to include row and column number\r\n      const moveButtonLabel =\r\n        \"Go to move #\" +\r\n        move +\r\n        \" ( Row : \" +\r\n        Math.floor(history[move].squareNumber / 3) +\r\n        \" , Column : \" +\r\n        (history[move].squareNumber % 3) +\r\n        \" )\";\r\n      const desc = move ? moveButtonLabel : \"Go to game start\";\r\n      const btnClass =\r\n        move === this.state.stepNumber\r\n          ? \"btn btn-primary btn-block\"\r\n          : \"btn btn-secondary btn-block\";\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            className={btnClass}\r\n            type={\"button\"}\r\n            onClick={() => this.jumpTo(move)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner === \"x\" || winner === \"o\") {\r\n      status = \"Winner : \" + winner;\r\n    }\r\n    // Adding game drawn message\r\n    else if (this.state.stepNumber === 9) {\r\n      status = \"Game Drawn\";\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"x\" : \"o\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// function to calculate if game is won\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      // todo return cell indices to highlight the boxes\r\n      return squares[a];\r\n    }\r\n  }\r\n  return \"-\";\r\n}\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}